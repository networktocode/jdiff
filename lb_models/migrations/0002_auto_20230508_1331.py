# Generated by Django 3.2.18 on 2023-05-08 13:31

import django.core.serializers.json
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import nautobot.core.fields
import nautobot.extras.models.mixins
import taggit.managers
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ("extras", "0047_enforce_custom_field_slug"),
        ("ipam", "0008_prefix_vlan_vlangroup_location"),
        ("lb_models", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Monitor",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                (
                    "slug",
                    nautobot.core.fields.AutoSlugField(blank=True, max_length=100, populate_from="name", unique=True),
                ),
                ("name", models.CharField(max_length=50, null=True)),
                ("comment", models.CharField(blank=True, max_length=100, null=True)),
                ("type", models.CharField(max_length=20)),
                ("lrtm", models.BooleanField(default=False)),
                ("snow_id", models.CharField(max_length=20, null=True)),
                ("args", models.JSONField()),
            ],
            options={
                "abstract": False,
            },
            bases=(
                models.Model,
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
            ),
        ),
        migrations.CreateModel(
            name="Server",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                (
                    "slug",
                    nautobot.core.fields.AutoSlugField(blank=True, max_length=100, populate_from="name", unique=True),
                ),
                ("name", models.CharField(max_length=50, null=True)),
                ("state", models.BooleanField(default=False)),
                ("td", models.IntegerField(null=True)),
                ("ipv4_address", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="ipam.ipaddress")),
                ("tags", taggit.managers.TaggableManager(through="extras.TaggedItem", to="extras.Tag")),
            ],
            options={
                "abstract": False,
            },
            bases=(
                models.Model,
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
            ),
        ),
        migrations.CreateModel(
            name="ServerServiceGroupBinding",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                (
                    "slug",
                    nautobot.core.fields.AutoSlugField(blank=True, max_length=100, populate_from="name", unique=True),
                ),
                ("name", models.CharField(max_length=50, null=True)),
            ],
            options={
                "abstract": False,
            },
            bases=(
                models.Model,
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
            ),
        ),
        migrations.CreateModel(
            name="ServiceGroupMemberBinding",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                (
                    "slug",
                    nautobot.core.fields.AutoSlugField(blank=True, max_length=100, populate_from="name", unique=True),
                ),
                ("name", models.CharField(max_length=50, null=True)),
                (
                    "server_port",
                    models.PositiveIntegerField(
                        null=True,
                        validators=[
                            django.core.validators.MaxValueValidator(65535),
                            django.core.validators.MinValueValidator(0),
                        ],
                    ),
                ),
                ("server_name", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="lb_models.server")),
                ("tags", taggit.managers.TaggableManager(through="extras.TaggedItem", to="extras.Tag")),
            ],
            options={
                "abstract": False,
            },
            bases=(
                models.Model,
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
            ),
        ),
        migrations.CreateModel(
            name="ServiceGroupMonitorBinding",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                (
                    "slug",
                    nautobot.core.fields.AutoSlugField(blank=True, max_length=100, populate_from="name", unique=True),
                ),
                ("name", models.CharField(max_length=50)),
                ("monitor", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="lb_models.monitor")),
                ("tags", taggit.managers.TaggableManager(through="extras.TaggedItem", to="extras.Tag")),
            ],
            options={
                "abstract": False,
            },
            bases=(
                models.Model,
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
            ),
        ),
        migrations.CreateModel(
            name="SSLServerBinding",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                (
                    "slug",
                    nautobot.core.fields.AutoSlugField(blank=True, max_length=100, populate_from="name", unique=True),
                ),
                ("name", models.CharField(max_length=50, null=True)),
            ],
            options={
                "abstract": False,
            },
            bases=(
                models.Model,
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
            ),
        ),
        migrations.RenameField(
            model_name="servicegroup",
            old_name="description",
            new_name="comment",
        ),
        migrations.RemoveField(
            model_name="customerappprofile",
            name="customerappprofile_id",
        ),
        migrations.RemoveField(
            model_name="customerappprofile",
            name="email",
        ),
        migrations.RemoveField(
            model_name="customerappprofile",
            name="name",
        ),
        migrations.RemoveField(
            model_name="customerappprofile",
            name="oe",
        ),
        migrations.RemoveField(
            model_name="servicegroup",
            name="member",
        ),
        migrations.RemoveField(
            model_name="servicegroup",
            name="sslprofile",
        ),
        migrations.RemoveField(
            model_name="servicegroup",
            name="td",
        ),
        migrations.RemoveField(
            model_name="servicegroup",
            name="type",
        ),
        migrations.RemoveField(
            model_name="sslcertkey",
            name="end_date",
        ),
        migrations.RemoveField(
            model_name="sslcertkey",
            name="issuer",
        ),
        migrations.RemoveField(
            model_name="sslcertkey",
            name="key",
        ),
        migrations.RemoveField(
            model_name="sslcertkey",
            name="serial_number",
        ),
        migrations.RemoveField(
            model_name="sslcertkey",
            name="start_date",
        ),
        migrations.RemoveField(
            model_name="sslcertkey",
            name="version_number",
        ),
        migrations.RemoveField(
            model_name="vserver",
            name="address",
        ),
        migrations.RemoveField(
            model_name="vserver",
            name="description",
        ),
        migrations.RemoveField(
            model_name="vserver",
            name="fqdn",
        ),
        migrations.RemoveField(
            model_name="vserver",
            name="interface",
        ),
        migrations.RemoveField(
            model_name="vserver",
            name="method",
        ),
        migrations.RemoveField(
            model_name="vserver",
            name="owner",
        ),
        migrations.RemoveField(
            model_name="vserver",
            name="pool",
        ),
        migrations.RemoveField(
            model_name="vserver",
            name="port",
        ),
        migrations.RemoveField(
            model_name="vserver",
            name="protocol",
        ),
        migrations.RemoveField(
            model_name="vserver",
            name="sslcertkey",
        ),
        migrations.RemoveField(
            model_name="vserver",
            name="vlan",
        ),
        migrations.RemoveField(
            model_name="vserver",
            name="vrf",
        ),
        migrations.AddField(
            model_name="customerappprofile",
            name="application_name",
            field=models.CharField(max_length=50, null=True),
        ),
        migrations.AddField(
            model_name="customerappprofile",
            name="oe_bu",
            field=models.CharField(max_length=50, null=True),
        ),
        migrations.AddField(
            model_name="customerappprofile",
            name="owner_contact",
            field=models.EmailField(max_length=254, null=True),
        ),
        migrations.AddField(
            model_name="customerappprofile",
            name="profile_name",
            field=models.CharField(max_length=50, null=True),
        ),
        migrations.AddField(
            model_name="servicegroup",
            name="service_type",
            field=models.CharField(max_length=20, null=True),
        ),
        migrations.AddField(
            model_name="servicegroup",
            name="snow_id",
            field=models.CharField(max_length=20, null=True),
        ),
        migrations.AddField(
            model_name="servicegroup",
            name="ssl_profile",
            field=models.CharField(max_length=50, null=True),
        ),
        migrations.AddField(
            model_name="sslcertkey",
            name="private_crt_filename",
            field=models.CharField(max_length=100, null=True),
        ),
        migrations.AddField(
            model_name="sslcertkey",
            name="private_key_filename",
            field=models.CharField(max_length=100, null=True),
        ),
        migrations.AddField(
            model_name="sslcertkey",
            name="snow_id",
            field=models.CharField(max_length=20, null=True),
        ),
        migrations.AddField(
            model_name="vserver",
            name="args",
            field=models.JSONField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="vserver",
            name="comment",
            field=models.CharField(blank=True, max_length=50, null=True),
        ),
        migrations.AddField(
            model_name="vserver",
            name="customer_app_profile",
            field=models.ForeignKey(
                null=True, on_delete=django.db.models.deletion.CASCADE, to="lb_models.customerappprofile"
            ),
        ),
        migrations.AddField(
            model_name="vserver",
            name="ipv4_address",
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to="ipam.ipaddress"),
        ),
        migrations.AddField(
            model_name="vserver",
            name="lb_method",
            field=models.CharField(max_length=20, null=True),
        ),
        migrations.AddField(
            model_name="vserver",
            name="persistence_type",
            field=models.CharField(max_length=20, null=True),
        ),
        migrations.AddField(
            model_name="vserver",
            name="service_type",
            field=models.CharField(max_length=20, null=True),
        ),
        migrations.AddField(
            model_name="vserver",
            name="snow_id",
            field=models.CharField(max_length=20, null=True),
        ),
        migrations.AddField(
            model_name="vserver",
            name="ssl_profile",
            field=models.CharField(max_length=50, null=True),
        ),
        migrations.AlterField(
            model_name="customerappprofile",
            name="accessibility",
            field=models.CharField(max_length=20, null=True),
        ),
        migrations.AlterField(
            model_name="customerappprofile",
            name="class_type",
            field=models.CharField(max_length=20, null=True),
        ),
        migrations.AlterField(
            model_name="customerappprofile",
            name="fqdn",
            field=models.CharField(max_length=50, null=True),
        ),
        migrations.AlterField(
            model_name="customerappprofile",
            name="slug",
            field=nautobot.core.fields.AutoSlugField(
                blank=True, max_length=100, populate_from="profile_name", unique=True
            ),
        ),
        migrations.AlterField(
            model_name="customerappprofile",
            name="test_url",
            field=models.URLField(null=True),
        ),
        migrations.AlterField(
            model_name="servicegroup",
            name="name",
            field=models.CharField(max_length=50, null=True),
        ),
        migrations.AlterField(
            model_name="sslcertkey",
            name="name",
            field=models.CharField(max_length=50, null=True),
        ),
        migrations.AlterField(
            model_name="sslcertkey",
            name="password",
            field=models.CharField(blank=True, max_length=50, null=True),
        ),
        migrations.AlterField(
            model_name="vserver",
            name="name",
            field=models.CharField(max_length=50, null=True),
        ),
        migrations.DeleteModel(
            name="ServiceGroupBinding",
        ),
        migrations.AddField(
            model_name="sslserverbinding",
            name="ssl_certkey",
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to="lb_models.sslcertkey"),
        ),
        migrations.AddField(
            model_name="sslserverbinding",
            name="tags",
            field=taggit.managers.TaggableManager(through="extras.TaggedItem", to="extras.Tag"),
        ),
        migrations.AddField(
            model_name="serverservicegroupbinding",
            name="service_group",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="lb_models.servicegroup"),
        ),
        migrations.AddField(
            model_name="serverservicegroupbinding",
            name="tags",
            field=taggit.managers.TaggableManager(through="extras.TaggedItem", to="extras.Tag"),
        ),
        migrations.AddField(
            model_name="servicegroup",
            name="service_group_member",
            field=models.ForeignKey(
                null=True, on_delete=django.db.models.deletion.PROTECT, to="lb_models.servicegroupmemberbinding"
            ),
        ),
        migrations.AddField(
            model_name="vserver",
            name="service_group_binding",
            field=models.ForeignKey(
                null=True, on_delete=django.db.models.deletion.PROTECT, to="lb_models.serverservicegroupbinding"
            ),
        ),
        migrations.AddField(
            model_name="vserver",
            name="ssl_binding",
            field=models.ForeignKey(
                null=True, on_delete=django.db.models.deletion.CASCADE, to="lb_models.sslserverbinding"
            ),
        ),
        migrations.AlterField(
            model_name="servicegroup",
            name="monitor",
            field=models.ForeignKey(
                null=True, on_delete=django.db.models.deletion.PROTECT, to="lb_models.servicegroupmonitorbinding"
            ),
        ),
        migrations.DeleteModel(
            name="HealthMonitor",
        ),
    ]
